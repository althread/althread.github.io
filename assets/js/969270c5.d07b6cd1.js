"use strict";(self.webpackChunkalthread=self.webpackChunkalthread||[]).push([[102],{2383:(e,r,s)=>{s.r(r),s.d(r,{assets:()=>u,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var n=s(6070),t=s(5710);const o={sidebar_position:1},i="Utilisation des programmes",a={id:"guide/program/simple-process",title:"Utilisation des programmes",description:"Nous allons maintenant voir comment cr\xe9er et ex\xe9cuter des programmes en Althread. Un programme est simplement un algorithme qui en s'ex\xe9cutant devient un processus, une unit\xe9 d'ex\xe9cution ind\xe9pendante, qui peut s'ex\xe9cuter en parall\xe8le d'autres processus. Les processus peuvent communiquer entre eux en utilisant des variables partag\xe9es ou des canaux.",source:"@site/docs/guide/program/simple-process.md",sourceDirName:"guide/program",slug:"/guide/program/simple-process",permalink:"/docs/guide/program/simple-process",draft:!1,unlisted:!1,editUrl:"https://github.com/althread/althread/tree/main/doc/docs/guide/program/simple-process.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"guideSidebar",previous:{title:"Syntaxe d'Althread",permalink:"/docs/guide/getting-started/syntaxe"},next:{title:"Arguments",permalink:"/docs/guide/program/arguments"}},u={},l=[{value:"D\xe9claration d&#39;un programme",id:"d\xe9claration-dun-programme",level:2},{value:"Ex\xe9cution d&#39;un programme",id:"ex\xe9cution-dun-programme",level:2},{value:"Que se passe-t-il lorsqu&#39;un programme est ex\xe9cut\xe9 ?",id:"que-se-passe-t-il-lorsquun-programme-est-ex\xe9cut\xe9-",level:3},{value:"Exemple complet",id:"exemple-complet",level:2}];function c(e){const r={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.header,{children:(0,n.jsx)(r.h1,{id:"utilisation-des-programmes",children:"Utilisation des programmes"})}),"\n",(0,n.jsx)(r.p,{children:"Nous allons maintenant voir comment cr\xe9er et ex\xe9cuter des programmes en Althread. Un programme est simplement un algorithme qui en s'ex\xe9cutant devient un processus, une unit\xe9 d'ex\xe9cution ind\xe9pendante, qui peut s'ex\xe9cuter en parall\xe8le d'autres processus. Les processus peuvent communiquer entre eux en utilisant des variables partag\xe9es ou des canaux."}),"\n",(0,n.jsx)(r.h2,{id:"d\xe9claration-dun-programme",children:"D\xe9claration d'un programme"}),"\n",(0,n.jsxs)(r.p,{children:["Pour d\xe9clarer un programme, vous devez utiliser le mot-cl\xe9 ",(0,n.jsx)(r.code,{children:"program"}),". Voici un exemple de d\xe9claration de programme :"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-althread",children:"program MyProgram() {\n    // code du programme\n}\n"})}),"\n",(0,n.jsx)(r.admonition,{type:"note",children:(0,n.jsx)(r.p,{children:"Il est possible de d\xe9clarer autant de programmes que vous le souhaitez. Tous les programmes d\xe9clar\xe9s sont stock\xe9s dans une liste"})}),"\n",(0,n.jsx)(r.admonition,{type:"warning",children:(0,n.jsx)(r.p,{children:"Il n'est pas possible d'avoir deux programmes avec le m\xeame nom."})}),"\n",(0,n.jsx)(r.h2,{id:"ex\xe9cution-dun-programme",children:"Ex\xe9cution d'un programme"}),"\n",(0,n.jsxs)(r.p,{children:["Pour ex\xe9cuter un programme, vous devez utiliser la fonction ",(0,n.jsx)(r.code,{children:"run"}),". Voici un exemple d'ex\xe9cution d'un programme :"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-althread",children:"main {\n    run MyProgram();\n}\n"})}),"\n",(0,n.jsxs)(r.admonition,{type:"note",children:[(0,n.jsxs)(r.p,{children:["Un programme peut \xeatre ex\xe9cut\xe9 plusieurs fois en parall\xe8le, ce qui cr\xe9e plusieurs processus ind\xe9pendants. Par exemple, pour ex\xe9cuter deux fois le programme ",(0,n.jsx)(r.code,{children:"MyProgram"})," en parall\xe8le, vous pouvez \xe9crire :"]}),(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-althread",children:"main {\n    run MyProgram();\n    run MyProgram();\n}\n"})})]}),"\n",(0,n.jsx)(r.h3,{id:"que-se-passe-t-il-lorsquun-programme-est-ex\xe9cut\xe9-",children:"Que se passe-t-il lorsqu'un programme est ex\xe9cut\xe9 ?"}),"\n",(0,n.jsxs)(r.p,{children:["Une fois un programme ex\xe9cut\xe9, il devient un processus. L'ex\xe9cution d'un processus se fait par it\xe9ration. Chaque it\xe9ration correspond \xe0 l'ex\xe9cution d'une ",(0,n.jsx)(r.a,{href:"/docs/guide/getting-started/syntaxe#expression-atomique",children:"instruction atomique"})," d'un processus choisi al\xe9atoirement parmi les processus en cours d'ex\xe9cution. Lorsqu'un processus est ex\xe9cut\xe9, il peut effectuer des op\xe9rations telles que l'assignation de variables, l'appel de fonctions, la lecture ou l'\xe9criture de canaux, etc..."]}),"\n",(0,n.jsx)(r.h2,{id:"exemple-complet",children:"Exemple complet"}),"\n",(0,n.jsx)(r.p,{children:"Voici un exemple complet d'un syst\xe8me Althread qui ex\xe9cute deux processus en parall\xe8le, l'un ex\xe9cutant le programme Prog1 et l'autre le programme main:"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-althread",children:'program Prog1() {\n    print("program 1");\n}\n\nmain {\n    run Prog1();\n    print("main");\n}\n'})}),"\n",(0,n.jsxs)(r.p,{children:["Dans cet exemple, le programme ",(0,n.jsx)(r.code,{children:"Prog1"})," est ex\xe9cut\xe9 en parall\xe8le du programme principal. Voici comment s'ex\xe9cute ce programme :"]}),"\n",(0,n.jsxs)(r.ol,{children:["\n",(0,n.jsxs)(r.li,{children:["Le programme ",(0,n.jsx)(r.code,{children:"Prog1"})," et le programme principal sont d\xe9clar\xe9s et stock\xe9s dans la liste des programmes."]}),"\n",(0,n.jsx)(r.li,{children:"Le programme principal est d\xe9marr\xe9 et son processus est ajout\xe9 \xe0 la liste des processus en cours d'ex\xe9cution."}),"\n",(0,n.jsx)(r.li,{children:"Un processus est tir\xe9 al\xe9atoirement parmi les processus en cours d'ex\xe9cution. Ici, comme il n'y a que le processus principal, c'est lui qui est ex\xe9cut\xe9."}),"\n",(0,n.jsxs)(r.li,{children:["Le programme principal ex\xe9cute l'instruction ",(0,n.jsx)(r.code,{children:"run Prog1();"}),", ce qui ajoute un processus ex\xe9cutant le programme ",(0,n.jsx)(r.code,{children:"Prog1"})," \xe0 la liste des processus en cours d'ex\xe9cution."]}),"\n",(0,n.jsxs)(r.li,{children:["Un processus est tir\xe9 al\xe9atoirement parmi les processus en cours d'ex\xe9cution. Ici, le processus principal et le processus ex\xe9cutant ",(0,n.jsx)(r.code,{children:"Prog1"})," sont en cours d'ex\xe9cution, donc l'un des deux est ex\xe9cut\xe9 al\xe9atoirement (soit l'instruction ",(0,n.jsx)(r.code,{children:'print("main");'}),", soit l'instruction ",(0,n.jsx)(r.code,{children:'print("program 1");'}),")."]}),"\n",(0,n.jsx)(r.li,{children:"Quand un processus a termin\xe9 son ex\xe9cution, il est retir\xe9 de la liste des processus en cours d'ex\xe9cution."}),"\n",(0,n.jsx)(r.li,{children:"Quand tous les processus ont termin\xe9 leur ex\xe9cution, le syst\xe8me s'arr\xeate."}),"\n"]}),"\n",(0,n.jsx)(r.admonition,{type:"note",children:(0,n.jsx)(r.p,{children:"Il n'y a pas de priorit\xe9 quant \xe0 l'ordre de d\xe9claration des programmes : tous les programmes d\xe9clar\xe9s sont stock\xe9s dans la liste des programmes avant l'ex\xe9cution du programme principal. Cependant, on verra que la v\xe9rification des types des canaux de communication est effectu\xe9e dans l'ordre de d\xe9claration des programmes. Ainsi, il faut utiliser les canaux uniquement quand leur types sont connus, donc apr\xe8s les avoir cr\xe9\xe9s (m\xeame si en pratique l'ordre dans lequel cela intervient durant l'ex\xe9cution est arbitraire)."})})]})}function d(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},5710:(e,r,s)=>{s.d(r,{R:()=>i,x:()=>a});var n=s(758);const t={},o=n.createContext(t);function i(e){const r=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),n.createElement(o.Provider,{value:r},e.children)}}}]);