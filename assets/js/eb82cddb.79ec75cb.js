"use strict";(self.webpackChunkalthread=self.webpackChunkalthread||[]).push([[731],{7403:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>u,frontMatter:()=>t,metadata:()=>d,toc:()=>c});var r=s(6070),i=s(5710);const t={sidebar_position:3},l="Syntaxe d'Althread",d={id:"guide/getting-started/syntaxe",title:"Syntaxe d'Althread",description:"La syntaxe d'althread est faite pour \xeatre la plus intuitive possible. Elle est inspir\xe9e du langage C et du Rust, ce qui permet de la prendre en main rapidement et de se concentrer sur les concepts plut\xf4t que sur la syntaxe.",source:"@site/docs/guide/getting-started/syntaxe.md",sourceDirName:"guide/getting-started",slug:"/guide/getting-started/syntaxe",permalink:"/docs/guide/getting-started/syntaxe",draft:!1,unlisted:!1,editUrl:"https://github.com/althread/althread/tree/main/doc/docs/guide/getting-started/syntaxe.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"guideSidebar",previous:{title:"Hello World",permalink:"/docs/guide/getting-started/hello-world"},next:{title:"Utilisation des programmes",permalink:"/docs/guide/program/simple-process"}},a={},c=[{value:"Structure d&#39;un projet",id:"structure-dun-projet",level:2},{value:"Type de donn\xe9es",id:"type-de-donn\xe9es",level:2},{value:"Typage statique",id:"typage-statique",level:3},{value:"Typage implicite",id:"typage-implicite",level:3},{value:"Convention de nommage des variables",id:"convention-de-nommage-des-variables",level:2},{value:"Structures de contr\xf4le et port\xe9e des variables",id:"structures-de-contr\xf4le-et-port\xe9e-des-variables",level:2},{value:"Instructions bloquantes",id:"instructions-bloquantes",level:2},{value:"Expression atomique",id:"expression-atomique",level:2}];function o(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"syntaxe-dalthread",children:"Syntaxe d'Althread"})}),"\n",(0,r.jsx)(n.p,{children:"La syntaxe d'althread est faite pour \xeatre la plus intuitive possible. Elle est inspir\xe9e du langage C et du Rust, ce qui permet de la prendre en main rapidement et de se concentrer sur les concepts plut\xf4t que sur la syntaxe."}),"\n",(0,r.jsx)(n.p,{children:"Quelques points important \xe0 retenir :"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Chaque ligne est termin\xe9e par un point-virgule ",(0,r.jsx)(n.code,{children:";"})," et les blocs de code sont d\xe9limit\xe9s par des accolades ",(0,r.jsx)(n.code,{children:"{}"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Les blocs de codes sont obligatoire apr\xe8s les structures de contr\xf4le (",(0,r.jsx)(n.code,{children:"if"}),", ",(0,r.jsx)(n.code,{children:"while"}),", etc...). Cependant, les parenth\xe8ses ne sont pas obligatoires."]}),"\n",(0,r.jsxs)(n.li,{children:["Les variables sont d\xe9clar\xe9es avec le mot-cl\xe9 ",(0,r.jsx)(n.code,{children:"let"})," ou ",(0,r.jsx)(n.code,{children:"const"})," suivi du nom de la variable, du type et de la valeur optionnelle."]}),"\n",(0,r.jsxs)(n.li,{children:["Les commentaires sont d\xe9limit\xe9s par ",(0,r.jsx)(n.code,{children:"//"})," pour un commentaire sur une ligne et ",(0,r.jsx)(n.code,{children:"/* */"})," pour un commentaire sur plusieurs lignes."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-althread",children:'main {\n    let x: int = 5;\n    const y = 3.4; // y est de type float\n\n    /* \n    La fonction print affiche\n    tous les arguments pass\xe9s en param\xe8tre\n    */\n    print("Hello world! y=", y);\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"structure-dun-projet",children:"Structure d'un projet"}),"\n",(0,r.jsx)(n.p,{children:"Un projet est structur\xe9 en plusieurs blocks, qui peuvent correspondre \xe0 3 types d'\xe9l\xe9ments :"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"D\xe9claration de variables globales"})," : ",(0,r.jsx)(n.code,{children:"shared { ... }"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"V\xe9rification de conditions"})," : ",(0,r.jsx)(n.code,{children:"always { ... }"}),", ",(0,r.jsx)(n.code,{children:"never { ... }"})," ou ",(0,r.jsx)(n.code,{children:"eventually { ... }"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"D\xe9finition de programme"})," : ",(0,r.jsx)(n.code,{children:"program A() { ... }"})," ou ",(0,r.jsx)(n.code,{children:"main { ... }"})]}),"\n"]}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsx)(n.p,{children:"Le block main est le progamme principal. Il est ex\xe9cut\xe9 en premier et sert a ex\xe9cuter les autres programmes."})}),"\n",(0,r.jsx)(n.h2,{id:"type-de-donn\xe9es",children:"Type de donn\xe9es"}),"\n",(0,r.jsx)(n.p,{children:"Les variables en althread peuvent prendre les types suivants :"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Vide"})," : ",(0,r.jsx)(n.code,{children:"void"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Bool\xe9en"})," : ",(0,r.jsx)(n.code,{children:"bool"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Entier"})," : ",(0,r.jsx)(n.code,{children:"int"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Flottant"})," : ",(0,r.jsx)(n.code,{children:"float"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Cha\xeene de caract\xe8res"})," : ",(0,r.jsx)(n.code,{children:"string"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:["Processus ex\xe9cutant un programme ",(0,r.jsx)(n.code,{children:"A"})]})," : ",(0,r.jsx)(n.code,{children:"proc(A)"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Tableau d'\xe9lement de type TYPE"})," : ",(0,r.jsx)(n.code,{children:"list(TYPE)"})]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"typage-statique",children:"Typage statique"}),"\n",(0,r.jsx)(n.p,{children:"Althread utilise un typage statique ce qui signifie que le type d'une variable est d\xe9termin\xe9 lorsqu'elle est d\xe9clar\xe9e et ne peut pas \xeatre modifi\xe9 par la suite. Ainsi, le programme suivant provoquera une erreur :"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-althread",children:"let x: int = 5;\nx = 3.4; // Erreur : x est de type int et ne peut pas prendre de valeur de type float.\n"})}),"\n",(0,r.jsx)(n.h3,{id:"typage-implicite",children:"Typage implicite"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-althread",children:"let a: int = 5;   // x est de type int et prend la valeur 5.\nlet b: bool;      // x est de type bool et prend la valeur par d\xe9faut false.\nlet c = 3.4;      // x est de type float et prend la valeur 3.4.\nlet d;            // x est de type void et prend la valeur par d\xe9faut `null`.\n"})}),"\n",(0,r.jsx)(n.h2,{id:"convention-de-nommage-des-variables",children:"Convention de nommage des variables"}),"\n",(0,r.jsx)(n.p,{children:"En althread, les variables local \xe0 un programme commence obligatoirement par une minuscule et les variables globales par une majuscule."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-althread",children:"shared {\n    let G = 5; // Y est une variable globale\n    // This will error\n    let g = 5; // erreur\n}\nprogram A() {\n    let l = 5; // x est une variable locale\n    // This will error\n    let L = 5; // erreur\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"structures-de-contr\xf4le-et-port\xe9e-des-variables",children:"Structures de contr\xf4le et port\xe9e des variables"}),"\n",(0,r.jsx)(n.p,{children:"Althread propose plusieurs structures de contr\xf4le pour g\xe9rer le flux d'ex\xe9cution d'un programme :"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Condition"})," : ",(0,r.jsx)(n.code,{children:"if condition { ... } else { ... }"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Boucle While"})," : ",(0,r.jsx)(n.code,{children:"while condition { ... }"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Boucle For"})," : ",(0,r.jsx)(n.code,{children:"for i in 0..10 { ... }"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Boucle infinie"})," : ",(0,r.jsx)(n.code,{children:"loop { ... }"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Scope"})," : ",(0,r.jsx)(n.code,{children:"{ ... }"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Les boucles peuvent \xeatre interrompues \xe0 l'aide de l'instruction ",(0,r.jsx)(n.code,{children:"break"})," ou ",(0,r.jsx)(n.code,{children:"continue"}),", qui permettent respectivement de sortir de la boucle ou de passer \xe0 l'it\xe9ration suivante."]}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsx)(n.p,{children:"Les variables d\xe9clar\xe9es dans une structure de contr\xf4le sont visibles uniquement \xe0 l'int\xe9rieur de cette structure. Cela permet de limiter la port\xe9e des variables et d'\xe9viter les conflits de noms."})}),"\n",(0,r.jsx)(n.h2,{id:"instructions-bloquantes",children:"Instructions bloquantes"}),"\n",(0,r.jsxs)(n.p,{children:["En althread, la seul instruction bloquante est l'attente d'une condition avec l'instruction ",(0,r.jsx)(n.code,{children:"wait"}),". Cette instruction permet de mettre en pause l'ex\xe9cution d'un processus jusqu'\xe0 ce que la condition soit v\xe9rifi\xe9e."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-althread",children:'program A() {\n    wait X == 5;\n    print("x est \xe9gal \xe0 5");\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["La condition peut \xeatre une expression bool\xe9enne comme dans l'exemple pr\xe9c\xe9dent, mais elle peut aussi \xeatre une reception d'un message sur un canal avec l'instruction ",(0,r.jsx)(n.code,{children:"receive"}),", qui peut \xeatre vue comme une expression bool\xe9enne valant ",(0,r.jsx)(n.code,{children:"true"})," si un message est re\xe7u et ",(0,r.jsx)(n.code,{children:"false"})," sinon."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-althread",children:'program A() {\n\n    wait receive channel_name(x);\n\n    print("message re\xe7u");\n    // x n\'est pas dans le scope\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Dans l'exemple pr\xe9c\xe9dent, ",(0,r.jsx)(n.code,{children:"x"})," n'est pas dans le scope apr\xe8s l'instruction ",(0,r.jsx)(n.code,{children:"wait"})," car l'instruction ",(0,r.jsx)(n.code,{children:"receive"})," est suivie de mani\xe8re optionnelle d'un bloc d'instruction, permettant d'utiliser les variables re\xe7ues."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-althread",children:'program A() {\n    wait receive channel_name(x) => {\n        print("message re\xe7u, x=", x);\n        // x est dans le scope\n    }\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["L'instruction ",(0,r.jsx)(n.code,{children:"wait"})," peut aussi \xeatre utilis\xe9e pour attendre une condition parmis plusieurs conditions en la faisant suivre de l'instruction ",(0,r.jsx)(n.code,{children:"first"})," ou ",(0,r.jsx)(n.code,{children:"all"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-althread",children:'program A() {\n    wait first {\n        receive channel_name1(x) => {\n            print("message re\xe7u, x=", x);\n        }\n        receive channel_name2(y) => {\n            print("message re\xe7u, y=", y);\n        }\n        X == 5 => {\n            print("x est \xe9gal \xe0 5");\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Dans cette construction, une condition bool\xe9enne peut aussi \xeatre suivie d'un bloc d'instruction afin d'ex\xe9cuter des instructions si la condition est v\xe9rifi\xe9e."}),"\n",(0,r.jsx)(n.h2,{id:"expression-atomique",children:"Expression atomique"}),"\n",(0,r.jsx)(n.p,{children:"Une expression atomique est la plus petite unit\xe9 d'ex\xe9cution. En althread, il existe 6 types d'expressions atomiques :"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"D\xe9claration"})," : ",(0,r.jsx)(n.code,{children:"let x = 5;"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Affectation"})," : ",(0,r.jsx)(n.code,{children:"x = 5;"}),",  ",(0,r.jsx)(n.code,{children:"x++;"}),", ",(0,r.jsx)(n.code,{children:"x += 1"}),";"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Op\xe9ration arithm\xe9tique"})," : ",(0,r.jsx)(n.code,{children:"x + y;"}),", ",(0,r.jsx)(n.code,{children:"x - y;"}),", ",(0,r.jsx)(n.code,{children:"x * y;"}),", ",(0,r.jsx)(n.code,{children:"x / y;"}),", ",(0,r.jsx)(n.code,{children:"x % y;"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Scope atomique"}),": ",(0,r.jsx)(n.code,{children:"atomic { ... }"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Appel de fonction"})," : ",(0,r.jsx)(n.code,{children:'print("Hello world");'}),", ",(0,r.jsx)(n.code,{children:"wait x == 5;"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Ex\xe9cution de processus"})," : ",(0,r.jsx)(n.code,{children:"run A();"})]}),"\n"]}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsx)(n.p,{children:"Les expressions atomiques ne peuvent pas \xeatre interrompues par un autre processus. Cela signifie que pendant qu'un processus ex\xe9cute une expression atomique, aucun autre processus ne peut prendre la main."})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},5710:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>d});var r=s(758);const i={},t=r.createContext(i);function l(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);