"use strict";(self.webpackChunkalthread=self.webpackChunkalthread||[]).push([[496],{7015:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>r,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>c,toc:()=>l});var t=s(6070),i=s(5710);const a={sidebar_position:2},o="Creating a Channel",c={id:"guide/channels/create",title:"Creating a Channel",description:"A communication channel can be created between two processes to allow them to communicate. Channel creation is done using the channel keyword. Here's an example of channel declaration:",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/guide/channels/create.md",sourceDirName:"guide/channels",slug:"/guide/channels/create",permalink:"/en/docs/guide/channels/create",draft:!1,unlisted:!1,editUrl:"https://github.com/althread/althread/tree/main/doc/docs/guide/channels/create.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"guideSidebar",previous:{title:"Shared Variables",permalink:"/en/docs/guide/program/global"},next:{title:"Multiple Message Waiting",permalink:"/en/docs/guide/channels/multiple-wait"}},r={},l=[{value:"Sending Messages",id:"sending-messages",level:2},{value:"Receiving Messages",id:"receiving-messages",level:2}];function d(e){const n={admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"creating-a-channel",children:"Creating a Channel"})}),"\n",(0,t.jsxs)(n.p,{children:["A communication channel can be created between two ",(0,t.jsx)(n.em,{children:"processes"})," to allow them to communicate. Channel creation is done using the ",(0,t.jsx)(n.code,{children:"channel"})," keyword. Here's an example of channel declaration:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-althread",children:"channel p1.out (string, int)> p2.in;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["In this example, a channel named ",(0,t.jsx)(n.code,{children:"out"})," is created on process ",(0,t.jsx)(n.code,{children:"p1"})," to send messages of type ",(0,t.jsx)(n.code,{children:"(string, int)"})," to the channel named ",(0,t.jsx)(n.code,{children:"in"})," on process ",(0,t.jsx)(n.code,{children:"p2"}),". Messages must strictly have the declared type. For now, channels can only be used in one direction (from ",(0,t.jsx)(n.code,{children:"p1"})," to ",(0,t.jsx)(n.code,{children:"p2"}),", indicated by the ",(0,t.jsx)(n.code,{children:">"})," chevron)."]}),"\n",(0,t.jsxs)(n.admonition,{type:"note",children:[(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"self"})," keyword refers to the current process and can be used to create a channel with another process."]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-althread",children:"channel self.out (string, int)> p2.in;\n"})})]}),"\n",(0,t.jsx)(n.h2,{id:"sending-messages",children:"Sending Messages"}),"\n",(0,t.jsxs)(n.p,{children:["A message is sent on a channel using the ",(0,t.jsx)(n.code,{children:"send"})," instruction. Here's an example of sending a message:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-althread",children:'program Prog1() {\n    send out("Hello", 42);\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["In this example, the message ",(0,t.jsx)(n.code,{children:"(Hello, 42)"})," is sent on the ",(0,t.jsx)(n.code,{children:"out"})," channel of the current process. For this instruction to be valid, a program must have declared an ",(0,t.jsx)(n.code,{children:"out"})," channel on at least one process of type ",(0,t.jsx)(n.code,{children:"Prog1"}),". This ensures that message types are consistent."]}),"\n",(0,t.jsxs)(n.p,{children:["Thus, for the previous example to work, the ",(0,t.jsx)(n.code,{children:"out"})," channel declaration must be attached to a program of type ",(0,t.jsx)(n.code,{children:"Prog1"}),":\nThe complete code is as follows:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-althread",children:'main {\n    let p1 = run Prog1();\n    channel p1.out (string, int)> self.in;\n}\nprogram Prog1() {\n    send out("Hello", 42);\n}\n'})}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["Since compilation occurs from top to bottom, it is necessary to declare channels before using them to ensure correct type checking. However, the ",(0,t.jsx)(n.code,{children:"main"})," program is always compiled first, so it is possible to move the ",(0,t.jsx)(n.code,{children:"main"})," program declaration to the bottom of the file."]})}),"\n",(0,t.jsx)(n.p,{children:"Sending a message is an asynchronous operation, meaning the process sending the message continues its execution without waiting for the recipient process to receive the message."}),"\n",(0,t.jsx)(n.h2,{id:"receiving-messages",children:"Receiving Messages"}),"\n",(0,t.jsxs)(n.p,{children:["A message is received on a channel using the ",(0,t.jsx)(n.code,{children:"receive"})," instruction.\nThis is a particular operation that must be preceded by the ",(0,t.jsx)(n.code,{children:"wait"})," instruction to make it blocking.\nHere's an example of message reception:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-althread",children:'main {\n    let p1 = run Prog1();\n    channel p1.out (string, int)> self.in;\n    // highlight-next-line\n    wait receive in (x, y) => {\n        print("Message received: ", x, y);\n    }\n}\nprogram Prog1() {\n    send out("Hello", 42);\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["We can see that the received values are stored in the variables ",(0,t.jsx)(n.code,{children:"x"})," and ",(0,t.jsx)(n.code,{children:"y"})," and can only be used in the instruction block following the ",(0,t.jsx)(n.code,{children:"receive"})," instruction.\nThe type of the variables is automatically deduced from the channel type."]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},5710:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>c});var t=s(758);const i={},a=t.createContext(i);function o(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);